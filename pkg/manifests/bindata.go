// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/externaldns/cluster-role-binding.yaml (262B)
// assets/externaldns/cluster-role.yaml (424B)
// assets/externaldns/deployment.yaml (609B)
// assets/externaldns/namespace.yaml (71B)
// assets/externaldns/service-account.yaml (101B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsExternaldnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x41\x6a\xc4\x30\x0c\x85\xe1\xbd\x4f\xa1\x0b\x24\xa5\xbb\xe2\x5d\xdb\x1b\xa4\xd0\xbd\x62\x2b\x8d\x1a\x47\x0a\x96\x1c\x4a\x4f\x3f\x84\x61\x20\x30\xcc\x6c\x85\xde\xc7\x8f\x1b\x7f\x53\x35\x56\x89\x50\x47\x4c\x3d\x36\x9f\xb5\xf2\x3f\x3a\xab\xf4\xcb\x9b\xf5\xac\x2f\xfb\x6b\x58\x58\x72\x84\xcf\xd2\xcc\xa9\x0e\x5a\xe8\x83\x25\xb3\xfc\x84\x95\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x52\x04\xdd\x48\x6c\xe6\xc9\x3b\xfa\x73\xaa\x82\x25\x8b\x05\x6b\xe3\x2f\x25\xb7\xe3\xb3\x83\x2b\xf8\x45\x75\xe7\x44\xef\x29\x69\x13\x3f\x11\xe7\xe1\xed\x6a\x1b\xa6\x87\x7a\xd5\x42\x03\x4d\x07\x7e\xd7\x1a\x9e\x87\x85\x4b\x00\x00\x00\xff\xff\x40\xfe\x1b\x90\x06\x01\x00\x00")

func assetsExternaldnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsExternaldnsClusterRoleBindingYaml,
		"assets/externaldns/cluster-role-binding.yaml",
	)
}

func assetsExternaldnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsExternaldnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/externaldns/cluster-role-binding.yaml", size: 262, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x0, 0x6d, 0xf, 0x3c, 0xc, 0x32, 0x15, 0xe, 0x36, 0x21, 0x2c, 0x92, 0x24, 0x6, 0x40, 0xf5, 0xe4, 0x66, 0xa4, 0xea, 0x44, 0x0, 0x80, 0xf1, 0xb2, 0xae, 0x16, 0xb9, 0x1e, 0x2f, 0xa2}}
	return a, nil
}

var _assetsExternaldnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x31\x4f\x33\x31\x0c\x06\xe0\x3d\xbf\xc2\xca\xdc\xde\xa7\x6f\x43\x59\x19\xd8\x19\x58\x10\x83\x7b\x31\x3d\xab\xa9\x1d\xd9\xce\x81\xf8\xf5\xe8\x4e\xdd\x60\x40\x88\xf5\xf5\xab\x47\xb6\xb1\xf3\x13\x99\xb3\x4a\x01\x3b\xe1\x3c\xe1\x88\x45\x8d\x3f\x30\x58\x65\xba\xdc\xf9\xc4\xfa\x6f\xfd\x9f\x2e\x2c\xb5\xc0\x7d\x1b\x1e\x64\x8f\xda\x28\x5d\x29\xb0\x62\x60\x49\x00\x82\x57\x2a\xa0\x9d\xc4\x17\x7e\x8d\x23\xbd\x07\x99\x60\xab\xe2\xc9\x46\x23\xdf\x4a\x47\xc0\xce\x0f\xa6\xa3\x7b\x81\xe7\x9c\x5f\x12\x00\x80\x91\xeb\xb0\x99\xf6\xcc\xc9\x56\x9e\xc9\x6f\xb3\x95\xec\xb4\xe7\x67\x8a\x7c\xc8\x6f\x18\xf3\x92\x0f\xb9\xb1\xc7\xde\xf8\x81\xd8\xb5\xfe\x52\xdb\x6e\x90\xed\x33\xfe\x9d\xcb\x72\x36\x72\xff\xcb\x55\x45\xeb\x57\xee\x06\x7c\x06\x00\x00\xff\xff\x8b\x3d\x14\xe4\xa8\x01\x00\x00")

func assetsExternaldnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsExternaldnsClusterRoleYaml,
		"assets/externaldns/cluster-role.yaml",
	)
}

func assetsExternaldnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsExternaldnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/externaldns/cluster-role.yaml", size: 424, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x11, 0xee, 0x29, 0xfa, 0x4e, 0xb, 0xef, 0x30, 0x92, 0x38, 0xfc, 0x87, 0xec, 0xec, 0xe2, 0x39, 0x49, 0xdf, 0x8a, 0xda, 0xc6, 0xb5, 0xaf, 0x67, 0xb2, 0xee, 0xdd, 0x1c, 0x61, 0x7a, 0x17}}
	return a, nil
}

var _assetsExternaldnsDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\xae\xda\x40\x0c\x85\xf7\x79\x0a\x4b\x59\xd3\x42\xa5\x16\x31\xbb\x0a\xba\xe8\xa2\x28\x52\xab\xee\xad\x89\xa1\x56\xe7\xaf\xb6\x87\xde\xbc\xfd\x55\x42\x10\x01\x31\x2b\xeb\xf8\xf8\xf8\xf3\xb4\x70\xa0\x12\xf2\x10\x29\x19\xfc\x67\xfb\x03\x3d\x9d\xb0\x06\x83\x0b\x86\x4a\xda\xb4\xf0\xed\xcd\x48\x12\x86\xc3\xf1\x27\x68\x21\xcf\x27\xf6\x73\x17\x50\x08\xb0\x94\xc0\xd4\x03\x1a\x48\x4d\xc6\x91\x3e\x34\x7f\x39\xf5\x6e\x11\xdd\x60\xe1\xdf\x24\xca\x39\xb9\x71\x40\x3f\x5e\x36\x4d\x0b\x09\x23\x01\xa6\x7e\x2a\xb4\xa0\xa7\x29\x51\xc9\x1e\xd2\xc6\xad\xae\x01\x30\x8a\x25\xa0\xd1\x58\x03\xdc\xd4\xa9\x26\xb9\xb0\xa7\xaf\xde\xe7\x9a\xec\x88\x91\x1c\xd0\xcc\xdd\x27\x9d\x5d\x45\x38\x0b\xdb\xb0\x0f\xa8\x7a\x35\xe9\xa0\x46\x71\xe5\x43\x55\x23\x59\x79\x61\x63\x8f\x61\x1e\xf0\x39\x19\x72\x22\xd1\xdb\x22\x80\xd5\x04\xfb\x2a\x7e\x7c\x2d\x70\xc4\xf3\xf5\x28\x94\xb3\xbe\xbc\xe7\x6e\x9f\xcc\x5d\x0d\xa1\xcb\x81\xfd\xe0\xe0\xfb\xe9\x98\xad\x13\xd2\xf1\xd3\xee\xbe\x92\xc5\x16\x0c\x77\x8a\x48\x26\xec\x97\x04\x0b\xea\x2e\x8b\x39\xd8\xee\xb6\xbb\x87\x7e\x91\x6c\xd9\xe7\xe0\xe0\xd7\xbe\x5b\x74\x84\x34\x57\xf1\xf4\xb0\x68\x94\xff\x55\x52\x7b\x52\x01\x7c\xa9\x0e\x36\xeb\x75\x7c\xd2\x23\xc5\x2c\x83\x83\x4f\x9f\xbf\xfc\xe0\xe6\x3d\x00\x00\xff\xff\x6a\x20\xe7\xd7\x61\x02\x00\x00")

func assetsExternaldnsDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsExternaldnsDeploymentYaml,
		"assets/externaldns/deployment.yaml",
	)
}

func assetsExternaldnsDeploymentYaml() (*asset, error) {
	bytes, err := assetsExternaldnsDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/externaldns/deployment.yaml", size: 609, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xd3, 0xe7, 0xd2, 0xea, 0xb5, 0xe7, 0x9d, 0x47, 0x7a, 0xc2, 0x9, 0x29, 0x3e, 0x7f, 0xca, 0x0, 0xdf, 0x79, 0xda, 0xde, 0x8c, 0xab, 0x3d, 0x69, 0xbc, 0xde, 0xdd, 0x1d, 0x28, 0x2d, 0xd9}}
	return a, nil
}

var _assetsExternaldnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x84\x30\x0c\x05\xd0\xde\x53\x78\x81\x2b\xae\xf5\x10\x57\x5e\xff\x45\x3e\xc2\x82\x38\x51\x6c\x21\xc6\xe7\x9d\x1e\xcd\xf4\x87\xce\x9c\xd8\x28\x98\xfe\xe7\x4a\x1f\x61\x7a\x7f\xa5\xb3\xd0\x50\x30\x51\x0d\x74\x9a\x8e\xc9\xc8\xc3\xf7\xfa\xf0\x29\xae\xc0\xd5\x22\xe5\x0d\x00\x00\xff\xff\xa4\x95\xf5\xf8\x47\x00\x00\x00")

func assetsExternaldnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsExternaldnsNamespaceYaml,
		"assets/externaldns/namespace.yaml",
	)
}

func assetsExternaldnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsExternaldnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/externaldns/namespace.yaml", size: 71, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0x21, 0xbb, 0x4a, 0xc4, 0xc, 0x6e, 0xc7, 0x3f, 0xe, 0x39, 0x88, 0x18, 0x9e, 0xa5, 0xf7, 0xc7, 0xae, 0x2d, 0x4b, 0xac, 0x8d, 0x87, 0xca, 0xf8, 0xf9, 0x57, 0x26, 0x82, 0xf5, 0x49, 0x63}}
	return a, nil
}

var _assetsExternaldnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x21\x0e\xc3\x30\x0c\x05\x50\x9e\x53\xf8\x02\x03\xa3\x66\x3b\xc3\xa4\x71\xcb\xf9\xd3\xac\x35\x4e\x14\xbb\x51\x8f\x5f\x52\x50\xfa\xf4\x64\xd8\x07\x33\xac\x3b\xd3\x7a\x96\xbf\x79\x65\x7a\x63\x2e\x53\xbc\x54\xfb\xee\x59\x1a\x52\xaa\xa4\x70\x21\x72\x69\x60\xc2\x91\x98\x2e\x5b\xf5\xb8\x2c\x86\x28\x98\xfa\x80\xc7\xcf\xbe\xf9\xb8\x97\x33\x00\x00\xff\xff\x5a\xef\xe8\x33\x65\x00\x00\x00")

func assetsExternaldnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsExternaldnsServiceAccountYaml,
		"assets/externaldns/service-account.yaml",
	)
}

func assetsExternaldnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsExternaldnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/externaldns/service-account.yaml", size: 101, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xd4, 0x16, 0xbb, 0x35, 0x94, 0xa5, 0xab, 0xcc, 0x93, 0x2b, 0x4b, 0x4e, 0x93, 0xba, 0x12, 0xf8, 0xad, 0xbf, 0x86, 0xf7, 0x32, 0x5d, 0xd0, 0x1d, 0xe7, 0x9e, 0x77, 0xb4, 0xb9, 0x32, 0x37}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/externaldns/cluster-role-binding.yaml": assetsExternaldnsClusterRoleBindingYaml,

	"assets/externaldns/cluster-role.yaml": assetsExternaldnsClusterRoleYaml,

	"assets/externaldns/deployment.yaml": assetsExternaldnsDeploymentYaml,

	"assets/externaldns/namespace.yaml": assetsExternaldnsNamespaceYaml,

	"assets/externaldns/service-account.yaml": assetsExternaldnsServiceAccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"externaldns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsExternaldnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsExternaldnsClusterRoleYaml, map[string]*bintree{}},
			"deployment.yaml":           {assetsExternaldnsDeploymentYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsExternaldnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsExternaldnsServiceAccountYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
